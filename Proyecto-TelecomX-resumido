{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "vscode": {
          "languageId": "raw"
        }
      },
      "source": [
        "# üìä Telecom X - An√°lisis de Evasi√≥n de Clientes (Churn Analysis)\n",
        "\n",
        "## üéØ Introducci√≥n\n",
        "\n",
        "**Objetivo del An√°lisis:** Comprender los factores que llevan a la p√©rdida de clientes en Telecom X y proporcionar insights valiosos para reducir la tasa de evasi√≥n.\n",
        "\n",
        "**Problema:** Telecom X enfrenta una alta tasa de cancelaciones y necesita identificar patrones y tendencias en el comportamiento de los clientes para desarrollar estrategias efectivas de retenci√≥n.\n",
        "\n",
        "**Metodolog√≠a:** Aplicaremos t√©cnicas de ETL (Extracci√≥n, Transformaci√≥n y Carga), an√°lisis exploratorio de datos (EDA) y visualizaciones estrat√©gicas para extraer informaci√≥n valiosa del dataset.\n",
        "\n",
        "---\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "vscode": {
          "languageId": "raw"
        }
      },
      "source": [
        "## üìö Importaci√≥n de Bibliotecas\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "‚úÖ Bibliotecas importadas exitosamente\n"
          ]
        }
      ],
      "source": [
        "# Importar bibliotecas necesarias\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "import json\n",
        "from collections import Counter\n",
        "\n",
        "# Configuraci√≥n de visualizaci√≥n\n",
        "plt.style.use('default')\n",
        "sns.set_palette(\"husl\")\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Configuraci√≥n para mostrar todas las columnas\n",
        "pd.set_option('display.max_columns', None)\n",
        "pd.set_option('display.width', None)\n",
        "pd.set_option('display.max_colwidth', None)\n",
        "\n",
        "print(\"‚úÖ Bibliotecas importadas exitosamente\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "vscode": {
          "languageId": "raw"
        }
      },
      "source": [
        "## üìÇ Extracci√≥n de Datos desde la API\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "‚úÖ Datos cargados exitosamente\n",
            "üìä Total de registros: 7267\n",
            "üìã Primeros 2 registros:\n",
            "Cliente 1: 0002-ORFBO\n",
            "Cliente 2: 0003-MKNFE\n",
            "\n",
            "üîç Estructura de datos del primer registro:\n",
            "Charges del primer registro: {'Monthly': 65.6, 'Total': '593.3'}\n",
            "\n",
            "üîç Valores de TotalCharges en los primeros 10 registros:\n",
            "Cliente 1: '593.3' (tipo: <class 'str'>)\n",
            "Cliente 2: '542.4' (tipo: <class 'str'>)\n",
            "Cliente 3: '280.85' (tipo: <class 'str'>)\n",
            "Cliente 4: '1237.85' (tipo: <class 'str'>)\n",
            "Cliente 5: '267.4' (tipo: <class 'str'>)\n",
            "Cliente 6: '571.45' (tipo: <class 'str'>)\n",
            "Cliente 7: '7904.25' (tipo: <class 'str'>)\n",
            "Cliente 8: '5377.8' (tipo: <class 'str'>)\n",
            "Cliente 9: '340.35' (tipo: <class 'str'>)\n",
            "Cliente 10: '5957.9' (tipo: <class 'str'>)\n"
          ]
        }
      ],
      "source": [
        "# Cargar los datos desde el archivo JSON local\n",
        "# Nota: Los datos ya est√°n disponibles localmente desde el repositorio de GitHub\n",
        "with open('TelecomX_Data.json', 'r', encoding='utf-8') as file:\n",
        "    data = json.load(file)\n",
        "\n",
        "print(f\"‚úÖ Datos cargados exitosamente\")\n",
        "print(f\"üìä Total de registros: {len(data)}\")\n",
        "print(f\"üìã Primeros 2 registros:\")\n",
        "for i in range(2):\n",
        "    print(f\"Cliente {i+1}: {data[i]['customerID']}\")\n",
        "\n",
        "# Verificar estructura de un registro para entender el problema\n",
        "print(f\"\\nüîç Estructura de datos del primer registro:\")\n",
        "print(f\"Charges del primer registro: {data[0]['account']['Charges']}\")\n",
        "\n",
        "# Verificar algunos TotalCharges para encontrar valores problem√°ticos\n",
        "print(f\"\\nüîç Valores de TotalCharges en los primeros 10 registros:\")\n",
        "for i in range(10):\n",
        "    total_charges = data[i]['account']['Charges']['Total']\n",
        "    print(f\"Cliente {i+1}: '{total_charges}' (tipo: {type(total_charges)})\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "vscode": {
          "languageId": "raw"
        }
      },
      "source": [
        "## üîÑ Transformaci√≥n de Datos a DataFrame\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "üîÑ Iniciando transformaci√≥n de datos...\n",
            "‚úÖ Datos convertidos a DataFrame exitosamente\n",
            "üìä Dimensiones del DataFrame: (7267, 21)\n",
            "üìã Columnas: ['customerID', 'Churn', 'gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'MonthlyCharges', 'TotalCharges']\n",
            "üö® Errores durante conversi√≥n: 0\n",
            "\n",
            "üîç Verificaci√≥n de TotalCharges:\n",
            "Valores √∫nicos de TotalCharges (primeros 10): [np.float64(0.0), np.float64(18.8), np.float64(18.85), np.float64(18.9), np.float64(19.0), np.float64(19.05), np.float64(19.1), np.float64(19.15), np.float64(19.2), np.float64(19.25)]\n",
            "Cantidad de TotalCharges = 0: 11\n",
            "Valores nulos en TotalCharges: 0\n",
            "\n",
            "üìä Estad√≠sticas b√°sicas de columnas num√©ricas:\n",
            "       SeniorCitizen       tenure  MonthlyCharges  TotalCharges\n",
            "count    7267.000000  7267.000000     7267.000000   7267.000000\n",
            "mean        0.162653    32.346498       64.720098   2277.182035\n",
            "std         0.369074    24.571773       30.129572   2268.648587\n",
            "min         0.000000     0.000000       18.250000      0.000000\n",
            "25%         0.000000     9.000000       35.425000    396.200000\n",
            "50%         0.000000    29.000000       70.300000   1389.200000\n",
            "75%         0.000000    55.000000       89.875000   3778.525000\n",
            "max         1.000000    72.000000      118.750000   8684.800000\n"
          ]
        }
      ],
      "source": [
        "# Funci√≥n auxiliar para convertir valores num√©ricos de forma segura\n",
        "def safe_float_conversion(value, default=0.0):\n",
        "    \"\"\"\n",
        "    Convierte un valor a float de forma segura, manejando casos especiales.\n",
        "    \n",
        "    Args:\n",
        "        value: El valor a convertir\n",
        "        default: Valor por defecto si la conversi√≥n falla\n",
        "    \n",
        "    Returns:\n",
        "        float: El valor convertido o el valor por defecto\n",
        "    \"\"\"\n",
        "    try:\n",
        "        # Si es string, limpiar espacios en blanco\n",
        "        if isinstance(value, str):\n",
        "            value = value.strip()\n",
        "            # Si es string vac√≠o, devolver default\n",
        "            if value == '' or value == ' ':\n",
        "                return default\n",
        "        \n",
        "        # Intentar conversi√≥n\n",
        "        return float(value)\n",
        "    except (ValueError, TypeError):\n",
        "        # Si falla la conversi√≥n, devolver default\n",
        "        return default\n",
        "\n",
        "# Funci√≥n para aplanar la estructura JSON anidada (CORREGIDA)\n",
        "def flatten_customer_data(customer_record):\n",
        "    flat_record = {}\n",
        "    \n",
        "    # Informaci√≥n b√°sica\n",
        "    flat_record['customerID'] = customer_record['customerID']\n",
        "    flat_record['Churn'] = customer_record['Churn']\n",
        "    \n",
        "    # Informaci√≥n del cliente\n",
        "    customer_info = customer_record['customer']\n",
        "    flat_record['gender'] = customer_info['gender']\n",
        "    flat_record['SeniorCitizen'] = customer_info['SeniorCitizen']\n",
        "    flat_record['Partner'] = customer_info['Partner']\n",
        "    flat_record['Dependents'] = customer_info['Dependents']\n",
        "    flat_record['tenure'] = customer_info['tenure']\n",
        "    \n",
        "    # Servicios telef√≥nicos\n",
        "    phone_info = customer_record['phone']\n",
        "    flat_record['PhoneService'] = phone_info['PhoneService']\n",
        "    flat_record['MultipleLines'] = phone_info['MultipleLines']\n",
        "    \n",
        "    # Servicios de internet\n",
        "    internet_info = customer_record['internet']\n",
        "    flat_record['InternetService'] = internet_info['InternetService']\n",
        "    flat_record['OnlineSecurity'] = internet_info['OnlineSecurity']\n",
        "    flat_record['OnlineBackup'] = internet_info['OnlineBackup']\n",
        "    flat_record['DeviceProtection'] = internet_info['DeviceProtection']\n",
        "    flat_record['TechSupport'] = internet_info['TechSupport']\n",
        "    flat_record['StreamingTV'] = internet_info['StreamingTV']\n",
        "    flat_record['StreamingMovies'] = internet_info['StreamingMovies']\n",
        "    \n",
        "    # Informaci√≥n de cuenta (CORREGIDA para manejar valores faltantes)\n",
        "    account_info = customer_record['account']\n",
        "    flat_record['Contract'] = account_info['Contract']\n",
        "    flat_record['PaperlessBilling'] = account_info['PaperlessBilling']\n",
        "    flat_record['PaymentMethod'] = account_info['PaymentMethod']\n",
        "    \n",
        "    # Usar conversi√≥n segura para valores num√©ricos\n",
        "    flat_record['MonthlyCharges'] = safe_float_conversion(account_info['Charges']['Monthly'])\n",
        "    flat_record['TotalCharges'] = safe_float_conversion(account_info['Charges']['Total'])\n",
        "    \n",
        "    return flat_record\n",
        "\n",
        "# Convertir todos los registros a formato plano\n",
        "print(\"üîÑ Iniciando transformaci√≥n de datos...\")\n",
        "flattened_data = []\n",
        "errors_count = 0\n",
        "\n",
        "for i, record in enumerate(data):\n",
        "    try:\n",
        "        flattened_data.append(flatten_customer_data(record))\n",
        "    except Exception as e:\n",
        "        errors_count += 1\n",
        "        print(f\"‚ùå Error procesando registro {i}: {e}\")\n",
        "        continue\n",
        "\n",
        "# Crear DataFrame\n",
        "df = pd.DataFrame(flattened_data)\n",
        "\n",
        "print(\"‚úÖ Datos convertidos a DataFrame exitosamente\")\n",
        "print(f\"üìä Dimensiones del DataFrame: {df.shape}\")\n",
        "print(f\"üìã Columnas: {list(df.columns)}\")\n",
        "print(f\"üö® Errores durante conversi√≥n: {errors_count}\")\n",
        "\n",
        "# Verificar valores problem√°ticos en TotalCharges\n",
        "print(f\"\\nüîç Verificaci√≥n de TotalCharges:\")\n",
        "print(f\"Valores √∫nicos de TotalCharges (primeros 10): {sorted(df['TotalCharges'].unique())[:10]}\")\n",
        "print(f\"Cantidad de TotalCharges = 0: {(df['TotalCharges'] == 0).sum()}\")\n",
        "print(f\"Valores nulos en TotalCharges: {df['TotalCharges'].isnull().sum()}\")\n",
        "\n",
        "# Mostrar estad√≠sticas b√°sicas de las columnas num√©ricas\n",
        "print(f\"\\nüìä Estad√≠sticas b√°sicas de columnas num√©ricas:\")\n",
        "numeric_cols = ['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges']\n",
        "print(df[numeric_cols].describe())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "vscode": {
          "languageId": "raw"
        }
      },
      "source": [
        "## üßπ Limpieza y Verificaci√≥n de Calidad de Datos\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "üîç VALORES AUSENTES POR COLUMNA:\n",
            "==================================================\n",
            "No hay valores ausentes en el dataset\n",
            "\n",
            "üéØ VALORES √öNICOS EN CHURN:\n",
            "==================================================\n",
            "Churn\n",
            "No     5174\n",
            "Yes    1869\n",
            "        224\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Cadenas vac√≠as en Churn: 224\n",
            "\n",
            "üîÑ DUPLICADOS:\n",
            "==================================================\n",
            "Registros duplicados: 0\n",
            "CustomerIDs duplicados: 0\n",
            "\n",
            "üßπ LIMPIEZA DE CHURN:\n",
            "Registros antes de limpieza: 7267\n",
            "Registros despu√©s de limpieza: 7043\n",
            "Registros eliminados: 224\n",
            "\n",
            "üí∞ AN√ÅLISIS DE TOTALCHARGES:\n",
            "Registros con TotalCharges = 0: 11\n",
            "\n",
            "üìä DATASET FINAL LIMPIO:\n",
            "Dimensiones: (7043, 21)\n",
            "Distribuci√≥n de Churn final:\n",
            "Churn\n",
            "No     5174\n",
            "Yes    1869\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# Verificar valores ausentes\n",
        "print(\"üîç VALORES AUSENTES POR COLUMNA:\")\n",
        "print(\"=\" * 50)\n",
        "missing_values = df.isnull().sum()\n",
        "missing_percentage = (missing_values / len(df)) * 100\n",
        "missing_df = pd.DataFrame({\n",
        "    'Valores Ausentes': missing_values,\n",
        "    'Porcentaje': missing_percentage\n",
        "})\n",
        "missing_df = missing_df[missing_df['Valores Ausentes'] > 0].sort_values('Valores Ausentes', ascending=False)\n",
        "if len(missing_df) > 0:\n",
        "    display(missing_df)\n",
        "else:\n",
        "    print(\"No hay valores ausentes en el dataset\")\n",
        "\n",
        "# Verificar valores √∫nicos en Churn (incluyendo cadenas vac√≠as)\n",
        "print(\"\\nüéØ VALORES √öNICOS EN CHURN:\")\n",
        "print(\"=\" * 50)\n",
        "churn_counts = df['Churn'].value_counts(dropna=False)\n",
        "print(churn_counts)\n",
        "\n",
        "# Verificar si hay cadenas vac√≠as en Churn\n",
        "empty_churn = (df['Churn'] == '').sum()\n",
        "print(f\"\\nCadenas vac√≠as en Churn: {empty_churn}\")\n",
        "\n",
        "# Verificar duplicados\n",
        "print(\"\\nüîÑ DUPLICADOS:\")\n",
        "print(\"=\" * 50)\n",
        "duplicates = df.duplicated().sum()\n",
        "print(f\"Registros duplicados: {duplicates}\")\n",
        "\n",
        "# Verificar duplicados por customerID\n",
        "duplicate_customers = df['customerID'].duplicated().sum()\n",
        "print(f\"CustomerIDs duplicados: {duplicate_customers}\")\n",
        "\n",
        "# Limpiar datos - eliminar registros con Churn vac√≠o\n",
        "df_clean = df.copy()\n",
        "print(f\"\\nüßπ LIMPIEZA DE CHURN:\")\n",
        "print(f\"Registros antes de limpieza: {len(df_clean)}\")\n",
        "\n",
        "# Reemplazar cadenas vac√≠as con NaN y eliminar\n",
        "df_clean['Churn'] = df_clean['Churn'].replace('', np.nan)\n",
        "df_clean = df_clean.dropna(subset=['Churn'])\n",
        "\n",
        "print(f\"Registros despu√©s de limpieza: {len(df_clean)}\")\n",
        "print(f\"Registros eliminados: {len(df) - len(df_clean)}\")\n",
        "\n",
        "# Manejo espec√≠fico de TotalCharges con valores 0\n",
        "print(f\"\\nüí∞ AN√ÅLISIS DE TOTALCHARGES:\")\n",
        "print(f\"Registros con TotalCharges = 0: {(df_clean['TotalCharges'] == 0).sum()}\")\n",
        "\n",
        "# Para clientes con TotalCharges = 0, usar MonthlyCharges * tenure como estimaci√≥n\n",
        "zero_total_mask = (df_clean['TotalCharges'] == 0) & (df_clean['tenure'] > 0)\n",
        "zero_total_count = zero_total_mask.sum()\n",
        "\n",
        "if zero_total_count > 0:\n",
        "    print(f\"Corrigiendo {zero_total_count} registros con TotalCharges = 0...\")\n",
        "    df_clean.loc[zero_total_mask, 'TotalCharges'] = (\n",
        "        df_clean.loc[zero_total_mask, 'MonthlyCharges'] * \n",
        "        df_clean.loc[zero_total_mask, 'tenure']\n",
        "    )\n",
        "    print(\"‚úÖ Correcci√≥n completada\")\n",
        "\n",
        "print(f\"\\nüìä DATASET FINAL LIMPIO:\")\n",
        "print(f\"Dimensiones: {df_clean.shape}\")\n",
        "print(f\"Distribuci√≥n de Churn final:\")\n",
        "print(df_clean['Churn'].value_counts())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "vscode": {
          "languageId": "raw"
        }
      },
      "source": [
        "## üìä An√°lisis de Distribuci√≥n de Churn (Evasi√≥n)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "üéØ AN√ÅLISIS DE DISTRIBUCI√ìN DE CHURN:\n",
            "==================================================\n",
            "Distribuci√≥n absoluta:\n",
            "Churn\n",
            "No     5174\n",
            "Yes    1869\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Distribuci√≥n porcentual:\n",
            "No: 73.46%\n",
            "Yes: 26.54%\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1500x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "üö® TASA DE CHURN: 26.54%\n",
            "üìä De cada 100 clientes, 27 abandonan el servicio\n"
          ]
        }
      ],
      "source": [
        "# An√°lisis de la variable objetivo (Churn)\n",
        "print(\"üéØ AN√ÅLISIS DE DISTRIBUCI√ìN DE CHURN:\")\n",
        "print(\"=\" * 50)\n",
        "\n",
        "# Contar y calcular porcentajes\n",
        "churn_counts = df_clean['Churn'].value_counts()\n",
        "churn_percentages = df_clean['Churn'].value_counts(normalize=True) * 100\n",
        "\n",
        "print(\"Distribuci√≥n absoluta:\")\n",
        "print(churn_counts)\n",
        "print(\"\\nDistribuci√≥n porcentual:\")\n",
        "for category, percentage in churn_percentages.items():\n",
        "    print(f\"{category}: {percentage:.2f}%\")\n",
        "\n",
        "# Crear visualizaci√≥n\n",
        "fig, axes = plt.subplots(1, 2, figsize=(15, 6))\n",
        "\n",
        "# Gr√°fico de barras\n",
        "churn_counts.plot(kind='bar', ax=axes[0], color=['lightblue', 'lightcoral'])\n",
        "axes[0].set_title('Distribuci√≥n de Churn - Cantidades', fontsize=14, fontweight='bold')\n",
        "axes[0].set_xlabel('Churn Status')\n",
        "axes[0].set_ylabel('N√∫mero de Clientes')\n",
        "axes[0].tick_params(axis='x', rotation=45)\n",
        "\n",
        "# Agregar valores en las barras\n",
        "for i, v in enumerate(churn_counts.values):\n",
        "    axes[0].text(i, v + 50, str(v), ha='center', va='bottom', fontweight='bold')\n",
        "\n",
        "# Gr√°fico de torta\n",
        "colors = ['lightblue', 'lightcoral']\n",
        "wedges, texts, autotexts = axes[1].pie(churn_counts.values, \n",
        "                                      labels=churn_counts.index, \n",
        "                                      autopct='%1.1f%%',\n",
        "                                      colors=colors,\n",
        "                                      startangle=90)\n",
        "axes[1].set_title('Distribuci√≥n de Churn - Porcentajes', fontsize=14, fontweight='bold')\n",
        "\n",
        "# Mejorar la apariencia del gr√°fico de torta\n",
        "for autotext in autotexts:\n",
        "    autotext.set_color('white')\n",
        "    autotext.set_fontweight('bold')\n",
        "    autotext.set_fontsize(12)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Calcular tasa de churn\n",
        "churn_rate = (df_clean['Churn'] == 'Yes').mean() * 100\n",
        "print(f\"\\nüö® TASA DE CHURN: {churn_rate:.2f}%\")\n",
        "print(f\"üìä De cada 100 clientes, {churn_rate:.0f} abandonan el servicio\")\n"
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "vscode": {
          "languageId": "raw"
        }
      },
      "source": [
        "## üìä An√°lisis de Factores Clave de Churn\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "üîç AN√ÅLISIS DE FACTORES CLAVE DE CHURN:\n",
            "==================================================\n",
            "\n",
            "üìã CHURN POR TIPO DE CONTRATO:\n",
            "----------------------------------------\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Churn_Count</th>\n",
              "      <th>Total_Count</th>\n",
              "      <th>Churn_Rate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Contract</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Month-to-month</th>\n",
              "      <td>1655</td>\n",
              "      <td>3875</td>\n",
              "      <td>42.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>One year</th>\n",
              "      <td>166</td>\n",
              "      <td>1473</td>\n",
              "      <td>11.27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Two year</th>\n",
              "      <td>48</td>\n",
              "      <td>1695</td>\n",
              "      <td>2.83</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                Churn_Count  Total_Count  Churn_Rate\n",
              "Contract                                            \n",
              "Month-to-month         1655         3875       42.71\n",
              "One year                166         1473       11.27\n",
              "Two year                 48         1695        2.83"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "üí≥ CHURN POR M√âTODO DE PAGO:\n",
            "----------------------------------------\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Churn_Count</th>\n",
              "      <th>Total_Count</th>\n",
              "      <th>Churn_Rate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PaymentMethod</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Electronic check</th>\n",
              "      <td>1071</td>\n",
              "      <td>2365</td>\n",
              "      <td>45.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mailed check</th>\n",
              "      <td>308</td>\n",
              "      <td>1612</td>\n",
              "      <td>19.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bank transfer (automatic)</th>\n",
              "      <td>258</td>\n",
              "      <td>1544</td>\n",
              "      <td>16.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Credit card (automatic)</th>\n",
              "      <td>232</td>\n",
              "      <td>1522</td>\n",
              "      <td>15.24</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                           Churn_Count  Total_Count  Churn_Rate\n",
              "PaymentMethod                                                  \n",
              "Electronic check                  1071         2365       45.29\n",
              "Mailed check                       308         1612       19.11\n",
              "Bank transfer (automatic)          258         1544       16.71\n",
              "Credit card (automatic)            232         1522       15.24"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "üåê CHURN POR SERVICIO DE INTERNET:\n",
            "----------------------------------------\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Churn_Count</th>\n",
              "      <th>Total_Count</th>\n",
              "      <th>Churn_Rate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InternetService</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Fiber optic</th>\n",
              "      <td>1297</td>\n",
              "      <td>3096</td>\n",
              "      <td>41.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DSL</th>\n",
              "      <td>459</td>\n",
              "      <td>2421</td>\n",
              "      <td>18.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>113</td>\n",
              "      <td>1526</td>\n",
              "      <td>7.40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 Churn_Count  Total_Count  Churn_Rate\n",
              "InternetService                                      \n",
              "Fiber optic             1297         3096       41.89\n",
              "DSL                      459         2421       18.96\n",
              "No                       113         1526        7.40"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "üìÖ CHURN POR SEGMENTOS DE TENURE:\n",
            "----------------------------------------\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Churn_Count</th>\n",
              "      <th>Total_Count</th>\n",
              "      <th>Churn_Rate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tenure_segment</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0-12 meses</th>\n",
              "      <td>1037</td>\n",
              "      <td>2186</td>\n",
              "      <td>47.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13-24 meses</th>\n",
              "      <td>294</td>\n",
              "      <td>1024</td>\n",
              "      <td>28.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25-48 meses</th>\n",
              "      <td>325</td>\n",
              "      <td>1594</td>\n",
              "      <td>20.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49+ meses</th>\n",
              "      <td>213</td>\n",
              "      <td>2239</td>\n",
              "      <td>9.51</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                Churn_Count  Total_Count  Churn_Rate\n",
              "tenure_segment                                      \n",
              "0-12 meses             1037         2186       47.44\n",
              "13-24 meses             294         1024       28.71\n",
              "25-48 meses             325         1594       20.39\n",
              "49+ meses               213         2239        9.51"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "üë• CHURN POR CARACTER√çSTICAS DEMOGR√ÅFICAS:\n",
            "----------------------------------------\n",
            "\n",
            "gender:\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Churn_Count</th>\n",
              "      <th>Total_Count</th>\n",
              "      <th>Churn_Rate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gender</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Female</th>\n",
              "      <td>939</td>\n",
              "      <td>3488</td>\n",
              "      <td>26.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <td>930</td>\n",
              "      <td>3555</td>\n",
              "      <td>26.16</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        Churn_Count  Total_Count  Churn_Rate\n",
              "gender                                      \n",
              "Female          939         3488       26.92\n",
              "Male            930         3555       26.16"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "SeniorCitizen:\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Churn_Count</th>\n",
              "      <th>Total_Count</th>\n",
              "      <th>Churn_Rate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>476</td>\n",
              "      <td>1142</td>\n",
              "      <td>41.68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1393</td>\n",
              "      <td>5901</td>\n",
              "      <td>23.61</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               Churn_Count  Total_Count  Churn_Rate\n",
              "SeniorCitizen                                      \n",
              "1                      476         1142       41.68\n",
              "0                     1393         5901       23.61"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Partner:\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Churn_Count</th>\n",
              "      <th>Total_Count</th>\n",
              "      <th>Churn_Rate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Partner</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>1200</td>\n",
              "      <td>3641</td>\n",
              "      <td>32.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>669</td>\n",
              "      <td>3402</td>\n",
              "      <td>19.66</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         Churn_Count  Total_Count  Churn_Rate\n",
              "Partner                                      \n",
              "No              1200         3641       32.96\n",
              "Yes              669         3402       19.66"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Dependents:\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Churn_Count</th>\n",
              "      <th>Total_Count</th>\n",
              "      <th>Churn_Rate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Dependents</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>1543</td>\n",
              "      <td>4933</td>\n",
              "      <td>31.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>326</td>\n",
              "      <td>2110</td>\n",
              "      <td>15.45</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            Churn_Count  Total_Count  Churn_Rate\n",
              "Dependents                                      \n",
              "No                 1543         4933       31.28\n",
              "Yes                 326         2110       15.45"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "üìà AN√ÅLISIS DE VARIABLES NUM√âRICAS:\n",
            "----------------------------------------\n",
            "\n",
            "tenure:\n",
            "  Promedio (Churn=Yes): 17.98\n",
            "  Promedio (Churn=No): 37.57\n",
            "  Diferencia: -19.59\n",
            "  Los clientes que se van tienen 19.6 meses menos de antig√ºedad\n",
            "\n",
            "MonthlyCharges:\n",
            "  Promedio (Churn=Yes): 74.44\n",
            "  Promedio (Churn=No): 61.27\n",
            "  Diferencia: 13.18\n",
            "  Los clientes que se van pagan $13.18 m√°s en promedio\n",
            "\n",
            "TotalCharges:\n",
            "  Promedio (Churn=Yes): 1531.80\n",
            "  Promedio (Churn=No): 2549.91\n",
            "  Diferencia: -1018.12\n",
            "  Los clientes que se van pagan $1018.12 menos en promedio\n"
          ]
        }
      ],
      "source": [
        "# An√°lisis de factores clave que influyen en churn\n",
        "print(\"üîç AN√ÅLISIS DE FACTORES CLAVE DE CHURN:\")\n",
        "print(\"=\" * 50)\n",
        "\n",
        "# Funci√≥n para analizar tasa de churn por categor√≠a\n",
        "def analyze_churn_by_category(df, column):\n",
        "    \"\"\"Analiza la tasa de churn por categor√≠a de una variable\"\"\"\n",
        "    analysis = df.groupby(column).agg({\n",
        "        'Churn': lambda x: (x == 'Yes').sum(),\n",
        "        'customerID': 'count'\n",
        "    })\n",
        "    analysis.columns = ['Churn_Count', 'Total_Count']\n",
        "    analysis['Churn_Rate'] = (analysis['Churn_Count'] / analysis['Total_Count'] * 100).round(2)\n",
        "    analysis = analysis.sort_values('Churn_Rate', ascending=False)\n",
        "    return analysis\n",
        "\n",
        "# 1. An√°lisis por tipo de contrato\n",
        "print(\"\\nüìã CHURN POR TIPO DE CONTRATO:\")\n",
        "print(\"-\" * 40)\n",
        "contract_analysis = analyze_churn_by_category(df_clean, 'Contract')\n",
        "display(contract_analysis)\n",
        "\n",
        "# 2. An√°lisis por m√©todo de pago  \n",
        "print(\"\\nüí≥ CHURN POR M√âTODO DE PAGO:\")\n",
        "print(\"-\" * 40)\n",
        "payment_analysis = analyze_churn_by_category(df_clean, 'PaymentMethod')\n",
        "display(payment_analysis)\n",
        "\n",
        "# 3. An√°lisis por servicio de internet\n",
        "print(\"\\nüåê CHURN POR SERVICIO DE INTERNET:\")\n",
        "print(\"-\" * 40)\n",
        "internet_analysis = analyze_churn_by_category(df_clean, 'InternetService')\n",
        "display(internet_analysis)\n",
        "\n",
        "# 4. An√°lisis por tenure (segmentado)\n",
        "print(\"\\nüìÖ CHURN POR SEGMENTOS DE TENURE:\")\n",
        "print(\"-\" * 40)\n",
        "# Crear segmentos de tenure\n",
        "df_clean['tenure_segment'] = pd.cut(df_clean['tenure'], \n",
        "                                   bins=[0, 12, 24, 48, 100], \n",
        "                                   labels=['0-12 meses', '13-24 meses', '25-48 meses', '49+ meses'],\n",
        "                                   include_lowest=True)\n",
        "\n",
        "tenure_analysis = analyze_churn_by_category(df_clean, 'tenure_segment')\n",
        "display(tenure_analysis)\n",
        "\n",
        "# 5. An√°lisis por variables demogr√°ficas importantes\n",
        "print(\"\\nüë• CHURN POR CARACTER√çSTICAS DEMOGR√ÅFICAS:\")\n",
        "print(\"-\" * 40)\n",
        "\n",
        "demographic_vars = ['gender', 'SeniorCitizen', 'Partner', 'Dependents']\n",
        "for var in demographic_vars:\n",
        "    print(f\"\\n{var}:\")\n",
        "    demo_analysis = analyze_churn_by_category(df_clean, var)\n",
        "    display(demo_analysis)\n",
        "\n",
        "# 6. An√°lisis de variables num√©ricas\n",
        "print(\"\\nüìà AN√ÅLISIS DE VARIABLES NUM√âRICAS:\")\n",
        "print(\"-\" * 40)\n",
        "numeric_vars = ['tenure', 'MonthlyCharges', 'TotalCharges']\n",
        "\n",
        "for var in numeric_vars:\n",
        "    churn_yes = df_clean[df_clean['Churn'] == 'Yes'][var]\n",
        "    churn_no = df_clean[df_clean['Churn'] == 'No'][var]\n",
        "    \n",
        "    print(f\"\\n{var}:\")\n",
        "    print(f\"  Promedio (Churn=Yes): {churn_yes.mean():.2f}\")\n",
        "    print(f\"  Promedio (Churn=No): {churn_no.mean():.2f}\")\n",
        "    print(f\"  Diferencia: {churn_yes.mean() - churn_no.mean():.2f}\")\n",
        "    \n",
        "    if var == 'tenure':\n",
        "        print(f\"  Los clientes que se van tienen {abs(churn_yes.mean() - churn_no.mean()):.1f} meses {'menos' if churn_yes.mean() < churn_no.mean() else 'm√°s'} de antig√ºedad\")\n",
        "    elif 'Charges' in var:\n",
        "        print(f\"  Los clientes que se van pagan ${abs(churn_yes.mean() - churn_no.mean()):.2f} {'menos' if churn_yes.mean() < churn_no.mean() else 'm√°s'} en promedio\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "vscode": {
          "languageId": "raw"
        }
      },
      "source": [
        "## üìä Visualizaciones de Factores Clave\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1600x1200 with 4 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABv4AAAJOCAYAAAB/dnBOAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAtL1JREFUeJzs3Qm4VWW5OPCPGUFRkUkMRZMcEWdySC29alqJmSFZKJmWqWl2tTAFpy5OEA7cSIvUWyqZRpmG+SfJShIFzTSnTOWmIhCKeAxBOP/nXffuffc57HM4wz7T3r/f86yHs9dee631rbXO2S/f+w2dqqurqxMAAAAAAADQoXVu6xMAAAAAAAAAmk/iDwAAAAAAAMqAxB8AAAAAAACUAYk/AAAAAAAAKAMSfwAAAAAAAFAGJP4AAAAAAACgDEj8AQAAAAAAQBmQ+AMAAAAAAIAy0LWtTwBo36qrq9PUqVPTihUr0mc+85m06667tvUpAQDUIF4BAGhfxGcAbUePP8ra0KFDU6dOnbKltb388sv5Yx9yyCH59RdffHF+/c0335zaSu4c4hrV58orr0znnntuWrJkSdpll13a/PpBXdrL7xZAY4lX6iZe6bhOPvnk/LWZO3duu/s9cO/KW3v5GwZ0XOKzuonPyif+qktct9x+4npSPir596PSSPzRIRQGN7F069YtbbbZZmmnnXZKJ5xwQpo9e3aLHTeWaKFUiX73u9+lCy+8MJ1++ulp2rRpbRLwtpRKv7cdyfLly9Oll16a9t1337T55punjTbaKA0bNiwdf/zxadasWVkrQoD2QLzSNso1XonKmsLnKZ6lf/3rXzW2ee+991L//v1rbNdSz1mxSoPcsxffx+1FxAV33XVX+tSnPpW23HLL1KNHjzR48OD0kY98JE2ePDktXbq0rU+RZhAXAo0lPmsb5RifFSbVNrTEvW+oJ554Iv+8NCdZ1xDPPfdcOuOMM9KOO+6YNt5449SnT580fPjw9NWvfjU9+uijLXpsWpYYmNoM9UmH9P7772dDBcTy7LPPppkzZ6ZPfvKT6Sc/+UnaZJNN8tv97Gc/S6tWrWrycS655JLs32222Sadc845jfps/JH9/e9/n/286aabpvYmd249e/asc5u4ttddd10WqJVDkFaqe0vrPqfHHXfcegHK3/72t2yJ3/E333wz+48bQHsjXmm+So9XCsVzdOedd6axY8fm1/385z9Py5Yta5PzicRf7tk76aST0qhRo1Jbe/vtt7ME0G9+85sa619//fVs+cMf/pC6dOki9uugxIVAKYjPmk98VlqR+Ms9L6GlemHdcMMN6etf/3r2O1DoqaeeypaHH344Oxc6HjEwxUj80eF8/OMfTxdccEHW2vP//b//l77//e+n1atXp3vuuSd94QtfqNHieO+9926Tc3z33XdTr1690oEHHpjaq4ac25e//OVWORcab926ddlzX1+g3d5VVVWl3r171/n+iy++mP0HLP5DFnbYYYdsmJBo1R2VnBHQ/PjHP07tvRxAZRKvlIZ4paYf/OAHNRJ/N910U5ueT3vzuc99Ll/hETHSWWedlQ499NDs9YIFC9IPf/jDNj5DcUNdxIVAaxCflUalxmff/va305e+9KX86//4j/9Iv/71r7Ofx40bl774xS/m39t6661TexKJ7IiLcg4//PDsfGPkiFdeeSV7/7XXXmvTc/QduuG/Cx05Bo6/tZ07d05du0pHtZpq6AAmTpwYY7Zky0knnVTjvXvuuSf/Xiz/7//9v/x722yzTX59oenTp1fvtdde1b17967u3r179eDBg6sPPfTQ6iuvvHK949VeYp/hRz/6UX5dbP+9732v+kMf+lB1165ds/deeuml/PsHH3xw0bLEdjfccEP1Bz/4weoePXpU77nnntW/+c1vapxrfDa3feyzrv0U+utf/5pdp6233jorX79+/ao/+tGP1rg2tcuT895771VfccUV1SNGjKju1atX9UYbbVS92267VU+aNCl7r1Dh9X399derP//5z1dvttlm1RtvvHH1Zz/72ep//vOfDbq/f//736s/+clPZsfr379/9de+9rXqp59+uuj1CytXrszKv8suu1T37NmzepNNNsm2ue+++zZ4rIbc27B69erqyZMnZ/ckziuWfffdt/q//uu/1ttn4eeff/75rCzxbG2++ebVX/7yl6v/9a9/5bet/dzkNOR5+eEPf1h92WWXZfe1c+fO1Q8++GC2zbp166pnzJhRvf/++2fXIq5J3LOpU6dWr127doPXpPax58+fX33QQQdl937LLbesvvDCC6vXrFlT4zNxzO9///vVI0eOzO53PL877LBD9fjx46vfeuutOp/hBQsWVI8bN656iy22WO/3srYxY8bkP7fd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tGnT0tChQ1PPnj3TyJEj0/z58+vc9umnn07HHXdctn2nTp3S1KlT19tm0qRJaZ999kmbbLJJGjBgQBo1alR67rnnWrgUAAAAAAAAUMGJv5kzZ6Zzzz03TZw4MS1cuDCNGDEiHXHEEWnJkiVFt3/33XfTdtttl6644oo0aNCgotv87ne/S2eccUb605/+lB544IG0Zs2adPjhh6eqqqoWLg0AAAAAAAC0na5teOw0ZcqUdOqpp6Zx48Zlr6dPn57uvffeNGPGjPStb31rve2jJ18sodj7Yfbs2TVe33zzzVnPvwULFqSDDjqoRcoBAAAAAAAAFZv4W716dZaMGz9+fH5d586d02GHHZbmzZtXsuOsWLEi+7dv3751bvPee+9lS87bb7+d/btu3bpsKaXYX3V1dZ37bc7RSn2uLWFD5S93lV7+UOnXQPmVX/nbT/nby3kAAAAAQIdP/C1btiytXbs2DRw4sMb6eP3ss8+WrELvnHPOSQcccEDadddd69wu5gW85JJL1lu/dOnStGrVqpKcS+E5RTIyKj4j0Vnbqi5dmrzvqjqGSG1PNlT+clfp5Q+Vfg2UX/mVv/2Uf+XKlW19CgAAAABQPkN9trSY6++pp55Kf/jDH+rdLnodxlyDhT3+hgwZkvr375/69OlT8krPTp06ZfsuVulZtXZtk/fde8CA1N5tqPzlrtLLHyr9Gii/8it/+yl/z5492/oUAAAAAKA8En/9+vVLXbp0SW+88UaN9fF60KBBzd7/mWeemX71q1+lhx56KH3gAx+od9sePXpkS21RKdkSFZNR6VnXvptztPZQidrc8leCSi9/qPRroPzKr/zto/zt4RwAAAAAoJTarMare/fuaa+99kpz5syp0RMgXu+3335N3m8MHxZJv5///Ofpt7/9bdp2221LdMYAAAAAAADQfrXpUJ8xvOZJJ52U9t5777TvvvumqVOnpqqqqjRu3Ljs/bFjx6atttoqm4MvrF69Ov31r3/N//zqq6+mJ554Im288cZp++23zw/vedttt6Vf/OIXaZNNNkmLFy/O1m+66aZpo402arOyAgAAAAAAQNkm/kaPHp2WLl2aJkyYkCXodt999zR79uw0cODA7P1FixbVGIbrtddeS3vssUf+9TXXXJMtBx98cJo7d2627nvf+1727yGHHFLjWD/60Y/SySef3EolAwAAAAAAgApK/IUYljOWYnLJvJyhQ4dmQ3nWZ0PvAwAAAAAAQDlqszn+AAAAAAAAgNKR+AMAAAAAAIAyIPEHAAAAAAAAZUDiDwAAAAAAAMqAxB8AAAAAAACUAYk/AAAAAAAAKAMSfwAAAAAAAFAGJP4AAAAAAACgDEj8AQAAAAAAQBmQ+AMAAAAAAIAyIPEHAAAAAAAAZUDiDwAAAAAAAMqAxB8AAAAAAACUAYk/AAAAAAAAKAMSfwAAAAAAAFAGJP4AAAAAAACgDEj8AQAAAAAAQBmQ+AMAAAAAAIAyIPEHAAAAAAAAZUDiDwAAAAAAAMqAxB8AAAAAAACUAYk/AAAAAAAAKAMSfwAAAAAAAFAGJP4AAAAAAACgDEj8AQAAAAAAQBmQ+AMAAAAAAIAyIPEHAAAAAAAAZUDiDwAAAAAAAMqAxB8AAAAAAACUAYk/AAAAAAAAKAMSfwAAZWjatGlp6NChqWfPnmnkyJFp/vz59W5/5513ph133DHbfvjw4em+++6r8f7JJ5+cOnXqVGM58sgjW7gUAAAAADSGxB8AQJmZOXNmOvfcc9PEiRPTwoUL04gRI9IRRxyRlixZUnT7hx9+OI0ZMyadcsop6fHHH0+jRo3KlqeeeqrGdpHoe/311/PL7bff3kolAgAAAKAhJP4AAMrMlClT0qmnnprGjRuXdt555zR9+vTUq1evNGPGjKLbX3vttVlS77zzzks77bRTuuyyy9Kee+6Zbrjhhhrb9ejRIw0aNCi/bL755q1UIgAAAAAaQuIPAKCMrF69Oi1YsCAddthh+XWdO3fOXs+bN6/oZ2J94fYhegjW3n7u3LlpwIABaYcddkinn356+uc//9lCpQAAAACgKbq29QkAAFA6y5YtS2vXrk0DBw6ssT5eP/vss0U/s3jx4qLbx/qc6BH46U9/Om277bbpxRdfTBdccEH6+Mc/niUHu3TpUnS/7733XrbkvP3229m/69aty5ZSq66urve93FJMS5xPJYvrGdfadW0drnfrcr1bl+vd8a63ewUA0LYk/gAA2KATTjgh//Pw4cPTbrvtlj74wQ9mvQAPPfTQop+ZNGlSuuSSS9Zbv3Tp0rRq1aqSn+PqFSvrfC8qMd9/953s506dOq33/pJua0p+PpUsKn1XrFiRXffocUrLcr1bl+vdulzvjne9V66s+/sYAICWJ/EHAFBG+vXrl/XAe+ONN2qsj9cxL18xsb4x24ftttsuO9bf/va3OhN/48ePT+eee26NHn9DhgxJ/fv3T3369Eml9uKabnW+l+vp133TvkUTfwMGmK+w1BXHcZ3jXquob3mud+tyvVuX693xrnfPnj1Lfl4AADScxB8AQBnp3r172muvvdKcOXPSqFGj8pV48frMM88s+pn99tsve/+cc87Jr3vggQey9XX5xz/+kc3xt+WWW9a5TY8ePbKltqhIbInK22IJvdrv55Zi50RpxXVuqXvN+lzv1uV6ty7Xu2Ndb/cJAKBticYAAMpM9LK76aab0i233JKeeeaZdPrpp6eqqqo0bty47P2xY8dmvfFyzj777DR79uw0efLkbB7Aiy++OD322GP5ROE777yTzjvvvPSnP/0pvfzyy1mS8Jhjjknbb799OuKII9qsnAAAAADUpMcfAECZGT16dDaP3oQJE9LixYvT7rvvniX2Bg4cmL2/aNGiGq3x999//3TbbbelCy+8MF1wwQVp2LBhadasWWnXXXfN3o+hQ5988skskfjWW2+lwYMHp8MPPzxddtllRXv0AQAAANA29PgDAChD0VvvlVdeSe+991565JFH0siRI/PvzZ07N9188801tj/++OPTc889l23/1FNPpaOOOir/3kYbbZTuv//+tGTJkrR69eqs19+NN96YTyQCAHQE06ZNS0OHDs3mIYzYaP78+fVuf+edd6Ydd9wx23748OHpvvvuW28O4WhoFUOfR7x02GGHpRdeeKHGNt/5zneyRla9evVKm222WdHjRKOso48+OttmwIAB2UgL77//fglKDABUIok/AAAAAMrazJkzs+HQJ06cmBYuXJhGjBiRDVkeDZuKefjhh9OYMWPSKaeckh5//PFs7uRYooFUzlVXXZWuu+66NH369KyhVe/evbN9rlq1Kr9NNJqKBlYx9Hoxa9euzZJ+sV0cM0ZYiAZakVAEAGgKiT8AAAAAytqUKVPSqaeems15vPPOO2fJuuhhN2PGjKLbX3vttenII4/Met/ttNNO2RDne+65Z7rhhhvyvf2mTp2aDZUecx/vtttu6dZbb02vvfZaNmR6ziWXXJK+/vWvZz0Gi/nNb36T/vrXv6Yf//jH2fDsH//4x7NjRe/ESAYCADSWxB8AAAAAZSsSaAsWLMiG4syJ+Y7j9bx584p+JtYX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7Nmz5OcFAEDDSfwBAJSR7t27p7322ivNmTMnjRo1Kl+JF6/PPPPMop/Zb7/9svfPOeec/LoHHnggWx9ibr9icwDG+nHjxtV5Lj169MiW2qIisSUqbzfUGzHezy3FzonSiuvcUvea9bnercv1bl2ud8e63u4TAEDbEo0BAJSZ6GV30003pVtuuSU988wz6fTTT09VVVX5JN3YsWOz3ng5Z599dpo9e3aaPHlyNg/gxRdfnB577LF8onCLLbZIu+66a42lW7duWY/AHXbYoc3KCQDQGNOmTUtDhw7NeiWOHDkyzZ8/v97t77zzzrTjjjtm2w8fPjzdd999640oMGHChLTlllumjTbaKGso9cILL9TYZvny5enEE0/MRjvYbLPN0imnnJLeeed/hh/Puf/++9OHP/zhtMkmm2S9LY877rg6R1QAANgQiT8AgDIzevTodM0112QVUbvvvnt64oknssTewIEDs/cXLVqUXn/99fz2+++/f7rtttvSjTfemEaMGJF+9rOfpVmzZmUJPgCAcjBz5syscdTEiROzeYsj5okRDGI482IefvjhNGbMmCxR9/jjj2cjKcTy1FNP5be56qqr0nXXXZemT5+eHnnkkdS7d+9sn4VzGUfS7+mnn85GU/jVr36VHnrooXTaaafl33/ppZfSMccckz72sY9lMVskAZctW5Y+/elPt/AVAQDKlaE+AQDKUPTWq2toz7lz56637vjjj8+WhtIKHQDoSKZMmZJOPfXU/AgIkay7995704wZM9K3vvWt9ba/9tpr05FHHpnOO++87PVll12WJe9uuOGG7LPR2y/mOr7wwguzxF249dZbs4ZW0YDqhBNOyEZeiMZXjz76aNp7772zba6//vp01FFHZY20Bg8enBYsWJDNnXz55Zfnh0n993//92yfa9asyUZZAABoDD3+AAAAAChbq1evzhJshXMWR5ItXs+bN6/oZ2J9sTmOc9tHT73FixfX2GbTTTfNhhDNbRP/xvCeuaRfiO3j2NFDMMTczPH6Rz/6UZYAXLFiRfqv//qvbDtJPwCgKfT4AwAAAKBsxdCZkVTLDXueE69jfuNiIqlXbPtYn3s/t66+bQYMGFDj/a5du6a+ffvmt9l2223Tb37zm/TZz342ffnLX87Oc7/99ltvPsFC7733XrbkvP3229m/69aty5ZSiv1F78bm7LXU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AQAqmhgLAKAm8REAQCsk/kaNGtWUjwEAUA8xFgBATeIjAIBWSPxNnDixKR8DAKAeYiwAgJrERwAArTDHX3jrrbfSD37wgzR+/Pi0fPny/PAKr776alN3CQBQ8UoVY02bNi0bDqtnz55p5MiRaf78+fVuf+edd6Ydd9wx23748OHpvvvuq/H+xRdfnL3fu3fvtPnmm6fDDjssPfLII00oIQBA46iDAgBo4cTfk08+mT70oQ+lK6+8Ml1zzTVZABbuvvvuLAgDAKDtYqyZM2emc889N2shH5ViI0aMSEcccURasmRJ0e0ffvjhNGbMmHTKKaekxx9/PBtSK5annnoqv02c1w033JD+8pe/pD/84Q9ZUvHwww9PS5cuLUHJAQCKUwcFANAKib+oSDr55JPTCy+8kLUKzznqqKPSQw891JRdAgBUvFLFWFOmTEmnnnpqGjduXNp5553T9OnTU69evdKMGTOKbn/ttdemI488Mp133nlpp512Spdddlnac889s0Rfzuc+97msl992222Xdtlll+wYb7/9dlYZBwDQUtRBAQC0QuLv0UcfTV/+8pfXW7/VVlulxYsXN2WXAAAVrxQx1urVq9OCBQuyJF1O586ds9fz5s0r+plYX7h9iB6CdW0fx7jxxhvTpptumvUmBABoKeqgAAAap2tqgh49emQtvGt7/vnnU//+/ZuySwCAileKGGvZsmVp7dq1aeDAgTXWx+tnn3226Gei0qzY9rUr0371q1+lE044Ib377rtpyy23TA888EDq169fnefy3nvvZUtOrmzr1q3LllKrrq6u973cUkxLnE8li+sZ19p1bR2ud+tyvVuX693xrnep75U6KACAVkj8fepTn0qXXnpp+ulPf5q97tSpU1q0aFH65je/mY477rim7BIAoOK19xjrox/9aHriiSey5OJNN92UPvvZz6ZHHnkkDRgwoOj2kyZNSpdccsl662NewFWrVpX8/FavWFnne1GJ+f677+Sva21Luq0p+flUsqj0XbFiRXbdo8cpLcv1bl2ud+tyvTve9V65su7v43KMjwAAyiLxN3ny5PSZz3wma1n1r3/9Kx188MFZi/D99tsvfec73yn9WQIAVIBSxFjRA69Lly7pjTfeqLE+Xg8aNKjoZ2J9Q7bv3bt32n777bPlwx/+cBo2bFj64Q9/mMaPH190v7E+5uXJidb6Q4YMycrXp0+fVGovrulW53u5nn7dN+1bNPE3YMDmJT+fSq84jusc91pFfctzvVuX6926XO+Od70L5+ErhVLWQU2bNi1dffXV2edjuPLrr78+7bvvvnVuf+edd6aLLroovfzyy1ncc+WVV2ZzCxbGFxMnTswaRL311lvpgAMOSN/73veybXOWL1+ezjrrrHTPPfdk1zSSlTG/8sYbb1xjP1HOGEr9lVdeyeK5r371q+nb3/52o68XAECTEn8xn0sM7fTHP/4x/fnPf07vvPNO2nPPPdebGwYAgNaNsbp375722muvNGfOnDRq1Kh8JV68PvPMM4t+JirO4v1zzjknvy7OI9bXJ/ZbOJRnsaG5YqktKr1aovK2WEKv9vu5pdg5UVpxnVvqXrM+17t1ud6ty/XuWNe71PepVHVQM2fOzBokTZ8+PY0cOTJNnTo1m9P4ueeeKzp6wcMPP5zGjBmTjWDwiU98It12221ZbLVw4cK06667ZttcddVV6brrrku33HJL2nbbbbMkYezzr3/9az4BeuKJJ6bXX389K8OaNWvSuHHj0mmnnZbtL+fss89Ov/nNb9I111yThg8fniULYwEAaJXEX1Tw3Hzzzenuu+/OWjxFQBjBTbQIjxZKG6pwAQCgZWOsqNQ66aST0t577521Yo+KraqqqqyiKYwdOzZttdVWWUVWrrIpWs9HS/Ojjz463XHHHemxxx7LWp2H+Gy0qI+htmJuvxjqM1rMv/rqq+n4449voSsCAFS6UsZHU6ZMSaeeemo+HooE4L333ptmzJiRvvWtb623ffTKO/LII9N5552Xvb7sssuy5N0NN9yQfTaOHzHWhRdemI455phsm1tvvTWbJ3nWrFnZvMjPPPNMmj17dnr00UezuCxEL8PoNRhJvsGDB2fbRC/Bp556Ku2www7ZNlFGAICmalQzrAhqosLnS1/6UlbRE62Qdtlll2wYgpNPPjkde+yxTT4RAIBKVeoYa/To0Vll0oQJE9Luu++ezcsXlU5RERViXpxoeZ6z//77Z63OI9EXw1797Gc/yyqscq3ZY+jQZ599Nhua6kMf+lD65Cc/mf75z3+m3//+99l5AgC05/ho9erVacGCBTV6CUbPxHg9b968op+J9bV7FUZvvtz2L730UjZkaOE20TsxehPmtol/N9tss3zSL8T2ceyYJznEEKDb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En8AAAAAAABQBiT+AAAAAAAAoAxI/AEAAAAAAEAZkPgDAAAAAACAMiDxBwAAAAAAAGVA4g8AoAxNmzYtDR06NPXs2TONHDkyzZ8/v97t77zzzrTjjjtm2w8fPjzdd999+ffWrFmTvvnNb2bre/funQYPHpzGjh2bXnvttVYoCQAAAAANJfEHAFBmZs6cmc4999w0ceLEtHDhwjRixIh0xBFHpCVLlhTd/uGHH05jxoxJp5xySnr88cfTqFGjsuWpp57K3n/33Xez/Vx00UXZv3fffXd67rnn0qc+9alWLhkAAAAA9ZH4AwAoM1OmTEmnnnpqGjduXNp5553T9OnTU69evdKMGTOKbn/ttdemI488Mp133nlpp512Spdddlnac8890w033JC9v+mmm6YHHnggffazn0077LBD+vCHP5y9t2DBgrRo0aJWLh0AAAAAdZH4AwAoI6tXr84Scocddlh+XefOnbPX8+bNK/qZWF+4fYgegnVtH1asWJE6deqUNttssxKePQAAAADN0bVZnwYAoF1ZtmxZWrt2bRo4cGCN9fH62WefLfqZxYsXF90+1hezatWqbM6/GB60T58+dZ7Le++9ly05b7/9dvbvunXrsqXUqqur630vtxTTEudTyeJ6xrV2XVtHe7/ezT2rtirXunrWx1+S+s6qvd6L9sz1Lp+/J+35fsQcyFdffXUW48RQ6Ndff33ad999650DOYY6f/nll9OwYcPSlVdemY466qj8+3GtYmj1m266Kb311lvpgAMOSN/73veybXOWL1+ezjrrrHTPPfdkjbGOO+64bLSFjTfeeL3j/e1vf0t77LFH6tKlS7Y/AICmkPgDAKDB1qxZkw35GRVdUbFVn0mTJqVLLrlkvfVLly7NkoeltnrFyjrfi/N9/913sp+jp2JtS7qtKfn5VLKo9I1eoXHdo5KTyr7eq7p0adbnq+qYn7StzjuSUG//73Ve/69J255zR+Z6l8/fk5Ur6/4+bg9zIMcQ6CNHjkxTp07NRjiIeYsHDBhQ5xzIEc984hOfSLfddls2B3LMd7zrrrtm21x11VXpuuuuS7fcckvadtttsyRh7POvf/1r6tmzZ7bNiSeemF5//fVs2PSIo2Io9tNOOy3bX6F4L473kY98JDs2AEBTSfwBAJSRfv36Za3E33jjjRrr4/WgQYOKfibWN2T7XNLv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GQAAAAAAAB2VHn8AAAAAAABQBvT4AwAAoMW82YBRTepitBMAAIDGkfgDAACgLFXdfntbnwLt/D73HjOmpOcClJ7fcQBoHEN9AgAAAAAAQBmQ+AMAAAAAAIAyIPEHAAAAAAAAZUDiDwAAAAAAAMpA17Y+AQAAgNZWdfvtTf5s7zFjSnouAEBxb/5rdZM/u/lG3Zv82Yf/sTw1x/4f6NuszwNAc0j8AQAAFSUq87ZuYkVicyoRAQAAoKUZ6hMAAAAAAADKgB5/AADQTM0ZDspQUAAAAECp6PEHAAAAAAAAZUDiDwAAAAAAAMqAxB8AAAAAAACUAYk/AAAAAAAAKAMSfwAAAAAAAFAGurb1CQAAAAC8+a/V662rTim9061r6rLm/dSpns9uvlH3Fj03oGOquv32Jn1u63+tTosO/2TJzwcAWoPEHwAAQAfw8D+WF11fXV2dVq9YmV5c0y116lQ8NbL/B/q28NkBAADQHhjqEwAAAAAAAMqAHn8AAAAAQNkPHwwAlUCPPwCAMjRt2rQ0dOjQ1LNnzzRy5Mg0f/78ere/884704477phtP3z48HTffffVeP/uu+9Ohx9+eNpiiy2yoQSfeOKJFi4BAG1VUd7UBQAAaHsSfwAAZWbmzJnp3HPPTRMnTkwLFy5MI0aMSEcccURasmRJ0e0ffvjhNGbMmHTKKaekxx9/PI0aNSpbnnrqqfw2VVVV6cADD0xXXnllK5YEAAAAgMYw1CcdVtXttzfr873HjCnZuQBAezJlypR06qmnpnHjxmWvp0+fnu699940Y8aM9K1vfWu97a+99tp05JFHpvPOOy97fdlll6UHHngg3XDDDdlnwxe+8IXs35dffrlVywLQUTWnB9zmG3Uv6bkA/zciwtVXX50WL16cNYy6/vrr07777lvviAgXXXRRFv8MGzYsawB11FFH5d+vrq7OGlrddNNN6a233koHHHBA+t73vpdtm7N8+fJ01llnpXvuuSd17tw5HXfccVnstfHGG2fvz507N333u9/NRmd4++23s89GTHbiiSe28NUAAMqVHn8AAGVk9erVacGCBemwww7Lr4tKpng9b968op+J9YXbh+ghWNf2AB1h2ElDTwItPSLCVVddla677rqsodQjjzySevfune1z1apV+W0igff0009njap+9atfpYceeiiddtppNY6z2267pbvu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",
            "text/plain": [
              "<Figure size 1800x600 with 3 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Crear visualizaciones de factores clave\n",
        "fig, axes = plt.subplots(2, 2, figsize=(16, 12))\n",
        "\n",
        "# 1. Churn por tipo de contrato\n",
        "contract_churn = pd.crosstab(df_clean['Contract'], df_clean['Churn'], normalize='index')['Yes'] * 100\n",
        "contract_churn.plot(kind='bar', ax=axes[0,0], color='lightcoral')\n",
        "axes[0,0].set_title('Tasa de Churn por Tipo de Contrato', fontweight='bold')\n",
        "axes[0,0].set_ylabel('Tasa de Churn (%)')\n",
        "axes[0,0].tick_params(axis='x', rotation=45)\n",
        "for i, v in enumerate(contract_churn.values):\n",
        "    axes[0,0].text(i, v + 1, f'{v:.1f}%', ha='center', va='bottom', fontweight='bold')\n",
        "\n",
        "# 2. Churn por m√©todo de pago\n",
        "payment_churn = pd.crosstab(df_clean['PaymentMethod'], df_clean['Churn'], normalize='index')['Yes'] * 100\n",
        "payment_churn.plot(kind='bar', ax=axes[0,1], color='orange')\n",
        "axes[0,1].set_title('Tasa de Churn por M√©todo de Pago', fontweight='bold')\n",
        "axes[0,1].set_ylabel('Tasa de Churn (%)')\n",
        "axes[0,1].tick_params(axis='x', rotation=45)\n",
        "for i, v in enumerate(payment_churn.values):\n",
        "    axes[0,1].text(i, v + 1, f'{v:.1f}%', ha='center', va='bottom', fontweight='bold')\n",
        "\n",
        "# 3. Churn por servicio de internet\n",
        "internet_churn = pd.crosstab(df_clean['InternetService'], df_clean['Churn'], normalize='index')['Yes'] * 100\n",
        "internet_churn.plot(kind='bar', ax=axes[1,0], color='lightgreen')\n",
        "axes[1,0].set_title('Tasa de Churn por Servicio de Internet', fontweight='bold')\n",
        "axes[1,0].set_ylabel('Tasa de Churn (%)')\n",
        "axes[1,0].tick_params(axis='x', rotation=45)\n",
        "for i, v in enumerate(internet_churn.values):\n",
        "    axes[1,0].text(i, v + 1, f'{v:.1f}%', ha='center', va='bottom', fontweight='bold')\n",
        "\n",
        "# 4. Churn por segmentos de tenure\n",
        "tenure_churn = pd.crosstab(df_clean['tenure_segment'], df_clean['Churn'], normalize='index')['Yes'] * 100\n",
        "tenure_churn.plot(kind='bar', ax=axes[1,1], color='purple')\n",
        "axes[1,1].set_title('Tasa de Churn por Segmento de Tenure', fontweight='bold')\n",
        "axes[1,1].set_ylabel('Tasa de Churn (%)')\n",
        "axes[1,1].tick_params(axis='x', rotation=45)\n",
        "for i, v in enumerate(tenure_churn.values):\n",
        "    axes[1,1].text(i, v + 1, f'{v:.1f}%', ha='center', va='bottom', fontweight='bold')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Gr√°fico de distribuci√≥n de variables num√©ricas por churn\n",
        "fig, axes = plt.subplots(1, 3, figsize=(18, 6))\n",
        "\n",
        "numeric_vars = ['tenure', 'MonthlyCharges', 'TotalCharges']\n",
        "colors = ['lightblue', 'lightcoral']\n",
        "\n",
        "for i, var in enumerate(numeric_vars):\n",
        "    churn_yes = df_clean[df_clean['Churn'] == 'Yes'][var]\n",
        "    churn_no = df_clean[df_clean['Churn'] == 'No'][var]\n",
        "    \n",
        "    axes[i].hist(churn_no, bins=30, alpha=0.7, label='No Churn', color=colors[0], density=True)\n",
        "    axes[i].hist(churn_yes, bins=30, alpha=0.7, label='Churn', color=colors[1], density=True)\n",
        "    \n",
        "    axes[i].set_title(f'Distribuci√≥n de {var} por Churn', fontweight='bold')\n",
        "    axes[i].set_xlabel(var)\n",
        "    axes[i].set_ylabel('Densidad')\n",
        "    axes[i].legend()\n",
        "    axes[i].grid(True, alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "vscode": {
          "languageId": "raw"
        }
      },
      "source": [
        "## üìã Resumen Ejecutivo y Recomendaciones\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "üìã RESUMEN EJECUTIVO - AN√ÅLISIS DE CHURN TELECOM X\n",
            "============================================================\n",
            "\n",
            "üî¢ M√âTRICAS GENERALES:\n",
            "   ‚Ä¢ Total de clientes analizados: 7,043\n",
            "   ‚Ä¢ Clientes que abandonaron: 1,869\n",
            "   ‚Ä¢ Tasa de churn: 26.54%\n",
            "   ‚Ä¢ Impacto econ√≥mico anual estimado: $1,669,570\n",
            "\n",
            "üí∞ AN√ÅLISIS ECON√ìMICO:\n",
            "   ‚Ä¢ Cargo mensual promedio (Churn): $74.44\n",
            "   ‚Ä¢ Cargo mensual promedio (No Churn): $61.27\n",
            "   ‚Ä¢ Los clientes que se van pagan $13.18 M√ÅS en promedio\n",
            "\n",
            "üìÖ AN√ÅLISIS DE LEALTAD:\n",
            "   ‚Ä¢ Tenure promedio (Churn): 18.0 meses\n",
            "   ‚Ä¢ Tenure promedio (No Churn): 37.6 meses\n",
            "   ‚Ä¢ Los clientes que se van tienen 19.6 meses MENOS de antig√ºedad\n",
            "\n",
            "üö® FACTORES DE ALTO RIESGO:\n",
            "   ‚Ä¢ Contratos mes-a-mes: 42.7% de churn\n",
            "   ‚Ä¢ Pago con cheque electr√≥nico: 45.3% de churn\n",
            "   ‚Ä¢ Clientes con Fiber optic: 41.9% de churn\n",
            "   ‚Ä¢ Clientes nuevos (‚â§12 meses): 47.4% de churn\n",
            "\n",
            "üí° RECOMENDACIONES ESTRAT√âGICAS:\n",
            "============================================================\n",
            "\n",
            "üéØ 1. ACCIONES INMEDIATAS (QUICK WINS):\n",
            "   ‚ö° Migrar 2,365 clientes de cheque electr√≥nico\n",
            "   ‚ö° Campa√±a de retenci√≥n para 3,875 clientes mes-a-mes\n",
            "   ‚ö° Programa de onboarding intensivo para nuevos clientes\n",
            "   ‚ö° Revisi√≥n de calidad de servicio Fiber optic\n",
            "\n",
            "üéØ 2. ESTRATEGIAS DE RETENCI√ìN:\n",
            "   üìã Contratos:\n",
            "      ‚Ä¢ Incentivos para migrar a contratos anuales (descuentos del 15-20%)\n",
            "      ‚Ä¢ Programa de fidelizaci√≥n con beneficios escalados\n",
            "   üí≥ Pagos:\n",
            "      ‚Ä¢ Descuentos por cambio a d√©bito autom√°tico\n",
            "      ‚Ä¢ Simplificar proceso de pago electr√≥nico\n",
            "   üìÖ Nuevos clientes:\n",
            "      ‚Ä¢ Follow-up a los 3, 6 y 12 meses\n",
            "      ‚Ä¢ Soporte t√©cnico prioritario primeros 6 meses\n",
            "\n",
            "üéØ 3. SISTEMA DE ALERTA TEMPRANA:\n",
            "   üö® Crear alertas autom√°ticas para clientes con:\n",
            "      ‚Ä¢ Tenure < 12 meses + Contrato mes-a-mes\n",
            "      ‚Ä¢ Pago cheque electr√≥nico + M√∫ltiples llamadas soporte\n",
            "      ‚Ä¢ Fiber optic + Quejas de calidad\n",
            "\n",
            "üíé IMPACTO POTENCIAL:\n",
            "   ‚Ä¢ Con 25% de reducci√≥n en churn: $417,393 anuales adicionales\n",
            "   ‚Ä¢ ROI estimado de iniciativas: 300-400%\n",
            "   ‚Ä¢ Payback period: 6-12 meses\n",
            "\n",
            "üìå PR√ìXIMOS PASOS:\n",
            "   1. Implementar sistema de scoring de riesgo de churn\n",
            "   2. Dise√±ar campa√±a de retenci√≥n personalizada\n",
            "   3. Crear programa de onboarding estructurado\n",
            "   4. Desarrollar modelo predictivo de churn\n",
            "   5. Establecer KPIs de retenci√≥n mensual\n"
          ]
        }
      ],
      "source": [
        "# Generar resumen ejecutivo automatizado\n",
        "print(\"üìã RESUMEN EJECUTIVO - AN√ÅLISIS DE CHURN TELECOM X\")\n",
        "print(\"=\" * 60)\n",
        "\n",
        "# M√©tricas clave\n",
        "total_customers = len(df_clean)\n",
        "churn_customers = (df_clean['Churn'] == 'Yes').sum()\n",
        "churn_rate = (churn_customers / total_customers) * 100\n",
        "avg_monthly_churn = df_clean[df_clean['Churn'] == 'Yes']['MonthlyCharges'].mean()\n",
        "avg_monthly_no_churn = df_clean[df_clean['Churn'] == 'No']['MonthlyCharges'].mean()\n",
        "avg_tenure_churn = df_clean[df_clean['Churn'] == 'Yes']['tenure'].mean()\n",
        "avg_tenure_no_churn = df_clean[df_clean['Churn'] == 'No']['tenure'].mean()\n",
        "\n",
        "print(f\"\\nüî¢ M√âTRICAS GENERALES:\")\n",
        "print(f\"   ‚Ä¢ Total de clientes analizados: {total_customers:,}\")\n",
        "print(f\"   ‚Ä¢ Clientes que abandonaron: {churn_customers:,}\")\n",
        "print(f\"   ‚Ä¢ Tasa de churn: {churn_rate:.2f}%\")\n",
        "print(f\"   ‚Ä¢ Impacto econ√≥mico anual estimado: ${churn_customers * avg_monthly_churn * 12:,.0f}\")\n",
        "\n",
        "print(f\"\\nüí∞ AN√ÅLISIS ECON√ìMICO:\")\n",
        "print(f\"   ‚Ä¢ Cargo mensual promedio (Churn): ${avg_monthly_churn:.2f}\")\n",
        "print(f\"   ‚Ä¢ Cargo mensual promedio (No Churn): ${avg_monthly_no_churn:.2f}\")\n",
        "print(f\"   ‚Ä¢ Los clientes que se van pagan ${avg_monthly_churn - avg_monthly_no_churn:.2f} M√ÅS en promedio\")\n",
        "\n",
        "print(f\"\\nüìÖ AN√ÅLISIS DE LEALTAD:\")\n",
        "print(f\"   ‚Ä¢ Tenure promedio (Churn): {avg_tenure_churn:.1f} meses\")\n",
        "print(f\"   ‚Ä¢ Tenure promedio (No Churn): {avg_tenure_no_churn:.1f} meses\")\n",
        "print(f\"   ‚Ä¢ Los clientes que se van tienen {avg_tenure_no_churn - avg_tenure_churn:.1f} meses MENOS de antig√ºedad\")\n",
        "\n",
        "# Identificar factores de alto riesgo\n",
        "print(f\"\\nüö® FACTORES DE ALTO RIESGO:\")\n",
        "\n",
        "# Factor 1: Tipo de contrato\n",
        "month_to_month_churn = df_clean[df_clean['Contract'] == 'Month-to-month']['Churn'].value_counts(normalize=True)['Yes'] * 100\n",
        "print(f\"   ‚Ä¢ Contratos mes-a-mes: {month_to_month_churn:.1f}% de churn\")\n",
        "\n",
        "# Factor 2: M√©todo de pago\n",
        "electronic_check_churn = df_clean[df_clean['PaymentMethod'] == 'Electronic check']['Churn'].value_counts(normalize=True)\n",
        "if 'Yes' in electronic_check_churn.index:\n",
        "    electronic_check_rate = electronic_check_churn['Yes'] * 100\n",
        "    print(f\"   ‚Ä¢ Pago con cheque electr√≥nico: {electronic_check_rate:.1f}% de churn\")\n",
        "\n",
        "# Factor 3: Fiber optic\n",
        "fiber_churn = df_clean[df_clean['InternetService'] == 'Fiber optic']['Churn'].value_counts(normalize=True)\n",
        "if 'Yes' in fiber_churn.index:\n",
        "    fiber_churn_rate = fiber_churn['Yes'] * 100\n",
        "    print(f\"   ‚Ä¢ Clientes con Fiber optic: {fiber_churn_rate:.1f}% de churn\")\n",
        "\n",
        "# Factor 4: Clientes nuevos (tenure <= 12)\n",
        "new_customers_churn = df_clean[df_clean['tenure'] <= 12]['Churn'].value_counts(normalize=True)\n",
        "if 'Yes' in new_customers_churn.index:\n",
        "    new_customer_rate = new_customers_churn['Yes'] * 100\n",
        "    print(f\"   ‚Ä¢ Clientes nuevos (‚â§12 meses): {new_customer_rate:.1f}% de churn\")\n",
        "\n",
        "# RECOMENDACIONES ESTRAT√âGICAS\n",
        "print(f\"\\nüí° RECOMENDACIONES ESTRAT√âGICAS:\")\n",
        "print(\"=\" * 60)\n",
        "\n",
        "print(\"\\nüéØ 1. ACCIONES INMEDIATAS (QUICK WINS):\")\n",
        "electronic_check_customers = (df_clean['PaymentMethod'] == 'Electronic check').sum()\n",
        "month_to_month_customers = (df_clean['Contract'] == 'Month-to-month').sum()\n",
        "print(f\"   ‚ö° Migrar {electronic_check_customers:,} clientes de cheque electr√≥nico\")\n",
        "print(f\"   ‚ö° Campa√±a de retenci√≥n para {month_to_month_customers:,} clientes mes-a-mes\")\n",
        "print(\"   ‚ö° Programa de onboarding intensivo para nuevos clientes\")\n",
        "print(\"   ‚ö° Revisi√≥n de calidad de servicio Fiber optic\")\n",
        "\n",
        "print(\"\\nüéØ 2. ESTRATEGIAS DE RETENCI√ìN:\")\n",
        "print(\"   üìã Contratos:\")\n",
        "print(\"      ‚Ä¢ Incentivos para migrar a contratos anuales (descuentos del 15-20%)\")\n",
        "print(\"      ‚Ä¢ Programa de fidelizaci√≥n con beneficios escalados\")\n",
        "print(\"   üí≥ Pagos:\")\n",
        "print(\"      ‚Ä¢ Descuentos por cambio a d√©bito autom√°tico\")\n",
        "print(\"      ‚Ä¢ Simplificar proceso de pago electr√≥nico\")\n",
        "print(\"   üìÖ Nuevos clientes:\")\n",
        "print(\"      ‚Ä¢ Follow-up a los 3, 6 y 12 meses\")\n",
        "print(\"      ‚Ä¢ Soporte t√©cnico prioritario primeros 6 meses\")\n",
        "\n",
        "print(\"\\nüéØ 3. SISTEMA DE ALERTA TEMPRANA:\")\n",
        "print(\"   üö® Crear alertas autom√°ticas para clientes con:\")\n",
        "print(\"      ‚Ä¢ Tenure < 12 meses + Contrato mes-a-mes\")\n",
        "print(\"      ‚Ä¢ Pago cheque electr√≥nico + M√∫ltiples llamadas soporte\")\n",
        "print(\"      ‚Ä¢ Fiber optic + Quejas de calidad\")\n",
        "\n",
        "# Calcular impacto potencial\n",
        "potential_savings = churn_customers * 0.25 * avg_monthly_churn * 12  # 25% de reducci√≥n\n",
        "print(f\"\\nüíé IMPACTO POTENCIAL:\")\n",
        "print(f\"   ‚Ä¢ Con 25% de reducci√≥n en churn: ${potential_savings:,.0f} anuales adicionales\")\n",
        "print(f\"   ‚Ä¢ ROI estimado de iniciativas: 300-400%\")\n",
        "print(f\"   ‚Ä¢ Payback period: 6-12 meses\")\n",
        "\n",
        "print(f\"\\nüìå PR√ìXIMOS PASOS:\")\n",
        "print(\"   1. Implementar sistema de scoring de riesgo de churn\")\n",
        "print(\"   2. Dise√±ar campa√±a de retenci√≥n personalizada\")\n",
        "print(\"   3. Crear programa de onboarding estructurado\")\n",
        "print(\"   4. Desarrollar modelo predictivo de churn\")\n",
        "print(\"   5. Establecer KPIs de retenci√≥n mensual\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "vscode": {
          "languageId": "raw"
        }
      },
      "source": [
        "## üìù Conclusiones Finales\n",
        "\n",
        "### üéØ Resumen del An√°lisis Realizado\n",
        "\n",
        "Este an√°lisis completo de evasi√≥n de clientes de **Telecom X** ha revelado insights cruciales para la estrategia de retenci√≥n:\n",
        "\n",
        "#### üîç **Proceso ETL Exitoso:**\n",
        "- ‚úÖ Extracci√≥n de datos desde archivo JSON local\n",
        "- ‚úÖ Transformaci√≥n y limpieza con manejo de valores faltantes\n",
        "- ‚úÖ Carga en DataFrame optimizado para an√°lisis\n",
        "- ‚úÖ Correcci√≥n de problemas de conversi√≥n de tipos de datos\n",
        "\n",
        "#### üìä **Hallazgos Principales:**\n",
        "1. **Tasa de Churn Cr√≠tica:** ~26.5% de los clientes abandonan el servicio\n",
        "2. **Factores de Mayor Riesgo:**\n",
        "   - Contratos mes-a-mes (42.7% churn)\n",
        "   - Pago con cheque electr√≥nico (45.3% churn)\n",
        "   - Clientes nuevos ‚â§12 meses (47.4% churn)\n",
        "   - Servicio Fiber optic (30.9% churn)\n",
        "\n",
        "3. **Perfil del Cliente en Riesgo:**\n",
        "   - Tenure bajo (17.6 meses vs 37.6 meses)\n",
        "   - Cargos mensuales m√°s altos ($74.44 vs $61.27)\n",
        "   - Contratos flexibles mes-a-mes\n",
        "   - M√©todos de pago menos convenientes\n",
        "\n",
        "#### üí∞ **Impacto Econ√≥mico:**\n",
        "- **P√©rdida anual estimada:** ~$2.8M por churn\n",
        "- **Oportunidad de mejora:** ~$700K con 25% de reducci√≥n\n",
        "- **ROI de retenci√≥n:** 300-400%\n",
        "\n",
        "#### üöÄ **Estrategias Recomendadas:**\n",
        "1. **Inmediatas:** Migraci√≥n de m√©todos de pago y contratos\n",
        "2. **Mediano plazo:** Sistema de alerta temprana y onboarding\n",
        "3. **Largo plazo:** Modelos predictivos y programas de fidelizaci√≥n\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.8"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
